BufferedInputStream#close():::Closes this input stream and releases any system resources associated with the stream
BufferedOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this buffered output stream
BufferedReader#skip(long):::Skips characters.
BufferedWriter#newLine():::Writes a line separator
ByteArrayInputStream#read():::Reads the next byte of data from this input stream
ByteArrayOutputStream#writeBytes(byte[]):::Writes the complete contents of the specified byte array to this ByteArrayOutputStream.
CharArrayReader#read():::Reads a single character.
CharArrayWriter#flush():::Flush the stream.
Closeable#close():::Closes this stream and releases any system resources associated with it
Console#flush():::Flushes the console and forces any buffered output to be written immediately .
DataInput#readUTF():::Reads in a string that has been encoded using a modified UTF-8 format
DataInputStream#readFully(byte[], int, int):::See the general contract of the readFully method of DataInput
DataOutput#write(byte[], int, int):::Writes len bytes from array b, in order,  to the output stream
DataOutputStream#writeInt(int):::Writes an int to the underlying output stream as four bytes, high byte first
DefaultFileSystem#getFileSystem():::Return the FileSystem object for Windows platform.
Externalizable#readExternal(ObjectInput):::The object implements the readExternal method to restore its contents by calling the methods of DataInput for primitive types and readObject for objects, strings and arrays
File#getParentFile():::Returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory
FileCleanable#register(FileDescriptor):::Register a Cleanable with the FileDescriptor if the FileDescriptor is non-null and valid.
FileDescriptor#unregisterCleanup():::Unregister a cleanup for the current raw fd or handle
FileFilter#accept(File):::Tests whether or not the specified abstract pathname should be included in a pathname list.
FileInputStream#read():::Reads a byte of data from this input stream
FilenameFilter#accept(File, String):::Tests if a specified file should be included in a file list.
FileOutputStream#getFD():::Returns the file descriptor associated with this stream.
FilePermission#newPermissionCollection():::Returns a new PermissionCollection object for storing FilePermission objects
FilePermissionCollection#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".
FileSystem#getLastModifiedTime(File):::Return the time at which the file or directory denoted by the given abstract pathname was last modified, or zero if it does not exist or some other I/O error occurs.
FilterInputStream#read():::Reads the next byte of data from this input stream
FilterOutputStream#flush():::Flushes this output stream and forces any buffered output bytes to be written out to the stream
FilterReader#read(char[], int, int):::Reads characters into a portion of an array.
FilterWriter#flush():::Flushes the stream.
Flushable#flush():::Flushes this stream by writing any buffered output to the underlying stream.
InputStream#markSupported():::Tests if this input stream supports the mark and reset methods
InputStreamReader#getEncoding():::Returns the name of the character encoding being used by this stream
InvalidClassException#getMessage():::Produce the message and include the classname, if present.
LineNumberInputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream
LineNumberReader#mark(int):::Mark the present position in the stream
ObjectInput#available():::Returns the number of bytes that can be read without blocking.
ObjectInputFilter#checkInput(FilterInfo):::Check the class, array length, number of object references, depth, stream size, and other available filtering information
ObjectInputFilter.FilterInfo#streamBytes():::The current number of bytes consumed.
ObjectInputFilter.Config#filterLog(System.Logger.Level, String, Object...):::Logger for debugging.
ObjectInputFilter.Config.Global#toString():::Returns the pattern used to create this filter.
ObjectInputStream#readFields():::Reads the persistent fields from the stream and makes them available by name.
ObjectInputStream.GetField#get(String, float):::Get the value of the named float field from the persistent field.
ObjectInputValidation#validateObject():::Validates the object.
ObjectOutput#write(byte[], int, int):::Writes a sub array of bytes.
ObjectOutputStream#reset():::Reset will disregard the state of any objects already written to the stream
ObjectOutputStream.PutField#put(String, double):::Put the value of the named double field into the persistent field.
ObjectStreamClass#isSerializable():::Returns true if represented class implements Serializable, false otherwise.
ObjectStreamClass.WeakClassKey#equals(Object):::Returns true if the given object is this identical WeakClassKey instance, or, if this object's referent has not been cleared, if the given object is another WeakClassKey instance with the identical non-null referent as this one.
ObjectStreamField#getSignature():::Returns JVM type signature of field (similar to getTypeString, except that signature strings are returned for primitive fields as well).
OutputStream#write(byte[]):::Writes b.length bytes from the specified byte array to this output stream
OutputStreamWriter#flush():::Flushes the stream.
PipedInputStream#receivedLast():::Notifies all waiting threads that the last byte of data has been received.
PipedOutputStream#write(int):::Writes the specified byte to the piped output stream
PipedReader#connect(PipedWriter):::Causes this piped reader to be connected to the piped  writer src
PipedWriter#close():::Closes this piped output stream and releases any system resources associated with this stream
PrintStream#println(String):::Prints a String and then terminate the line
PrintWriter#println(float):::Prints a floating-point number and then terminates the line
PushbackInputStream#close():::Closes this input stream and releases any system resources associated with the stream
PushbackReader#unread(char[]):::Pushes back an array of characters by copying it to the front of the pushback buffer
RandomAccessFile#writeChars(String):::Writes a string to the file as a sequence of characters
Reader#ready():::Tells whether this stream is ready to be read.
SequenceInputStream#read():::Reads the next byte of data from this input stream
StreamTokenizer#whitespaceChars(int, int):::Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are white space characters
StringBufferInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes
StringReader#reset():::Resets the stream to the most recent mark, or to the beginning of the string if it has never been marked.
StringWriter#close():::Closing a StringWriter has no effect
UncheckedIOException#getCause():::Returns the cause of this exception.
WriteAbortedException#getMessage():::Produce the message and include the message from the nested exception, if there is one.
Writer#write(String):::Writes a string.
Annotation#toString():::Returns the String representation of this Annotation.
AnnotationTypeMismatchException#foundType():::Returns the type of data found in the incorrectly typed element
IncompleteAnnotationException#elementName():::Returns the name of the missing element.
AbstractStringBuilder#compareTo(AbstractStringBuilder):::Compares the objects of two AbstractStringBuilder implementations lexicographically.
Appendable#append(CharSequence):::Appends the specified character sequence to this Appendable
AutoCloseable#close():::Closes this resource, relinquishing any underlying resources
Boolean#logicalOr(boolean, boolean):::Returns the result of applying the logical OR operator to the specified boolean operands.
Byte#toString(byte):::Returns a new String object representing the specified byte
Character.Subset#equals(Object):::Compares two Subset objects for equality
Character.UnicodeBlock#of(char):::Returns the object representing the Unicode block containing the given character, or null if the character is not a member of a defined block
Character#isUpperCase(char):::Determines if the specified character is an uppercase character
CharacterData00#findInCharMap(int):::Finds the character in the uppercase mapping table.
CharSequence#chars():::Returns a stream of int zero-extending the char values from this sequence
Class#getModule():::Returns the module that this class or interface is a member of
ClassLoader#defineClass(String, byte[], int, int):::Converts an array of bytes into an instance of class Class
ClassLoaderHelper#mapAlternativeName(File):::Returns an alternate path name for the given file such that if the original pathname did not exist, then the file may be located at the alternate location
ClassNotFoundException#getException():::Returns the exception that was raised if an error occurred while attempting to load the class
ClassValue#remove(Class):::Removes the associated value for the given class
ClassValue.Entry#value():::Fetch the value
ClassValue.ClassValueMap#finishEntry(ClassValue, Entry):::Finish a query
Comparable#compareTo(T):::Compares this object with the specified object for order
Compiler#disable():::Cause the Compiler to cease operation.
Double#intValue():::Returns the value of this Double as an int after a narrowing primitive conversion.
Enum#compareTo(E):::Compares this enum with the specified object for order
EnumConstantNotPresentException#constantName():::Returns the name of the missing enum constant.
ExceptionInInitializerError#getException():::Returns the exception that occurred during a static initialization that caused this error to be created
Float#compareTo(Float):::Compares two Float objects numerically
InheritableThreadLocal#getMap(Thread):::Get the map associated with a ThreadLocal.
Integer#rotateLeft(int, int):::Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits
Iterable#iterator():::Returns an iterator over elements of type T.
LiveStackFrame#getLocals():::Gets the local variable array of this stack frame
LiveStackFrame.PrimitiveSlot#intValue():::Returns the int value if this primitive value is of size 4
Long#formatUnsignedLong0(long, int, byte[], int, int):::byte[]/LATIN1 version
Math#round(float):::Returns the closest int to the argument, with ties rounding to positive infinity
Module#toString():::Returns the string representation of this module
ModuleLayer.Controller#addReads(Module, Module):::Updates module source in the layer to read module target
ModuleLayer#configuration():::Returns the configuration for this layer.
NamedPackage#packageName():::Returns the name of this package.
Number#floatValue():::Returns the value of the specified number as a float.
NumberFormatException#forCharSequence(CharSequence, int, int, int):::Factory method for making a NumberFormatException given the specified input which caused the error.
Object#getClass():::Returns the runtime class of this Object
Package#getName():::Return the name of this package.
Process#waitFor(long, TimeUnit):::Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated, or the specified waiting time elapses
ProcessBuilder#redirectOutput():::Returns this process builder's standard output destination
ProcessBuilder.Redirect#append():::When redirected to a destination file, indicates if the output is to be written to the end of the file.
ProcessHandle#current():::Returns a ProcessHandle for the current process
ProcessHandle.Info#totalCpuDuration():::Returns the total cputime accumulated of the process.
ProcessHandleImpl#isAlive():::Tests whether the process represented by this ProcessHandle is alive.
ProcessHandleImpl.Info#info(long, long):::Returns the Info object with the fields from the process
ProcessImpl#toString():::The toString method returns a string consisting of the native process ID of the process and the exit value of the process.
PublicMethods#merge(Method):::Merges new method with existing methods
PublicMethods.MethodList#merge(MethodList, MethodList):::This method should only be called with the head (possibly null) of a list of Method(s) that share the same (method name, parameter types) and another methodList that also contains Method(s) with the same and equal (method name, parameter types) as the 1st list
Readable#read(java.nio.CharBuffer):::Attempts to read characters into the specified character buffer
Runnable#run():::When an object implementing interface Runnable is used to create a thread, starting the thread causes the object's run method to be called in that separately executing thread
Runtime#exec(String, String[]):::Executes the specified string command in a separate process with the specified environment
Runtime.Version#parse(String):::Parses the given string as a valid version string containing a version number followed by pre-release and build information.
SecurityManager#checkExit(int):::Throws a SecurityException if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code
Short#reverseBytes(short):::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified short value.
Shutdown#add(int, boolean, Runnable):::Add a new system shutdown hook
StackStreamFactory#makeCallerFinder(StackWalker):::Gets a stack stream to find caller class.
StackStreamFactory.AbstractStackWalker#consumeFrames():::A callback method to consume the stack frames
StackStreamFactory.StackFrameTraverser#nextStackFrame():::Returns next StackFrame object in the current batch of stack frames; or null if no more stack frame.
StackStreamFactory.CallerClassFinder.ClassBuffer#resize(int, int):::Resizes the buffers for VM to fill in the next batch of stack frames
StackStreamFactory.FrameBuffer#next():::Gets the class at the current frame and move to the next frame.
StackTraceElement#getLineNumber():::Returns the line number of the source line containing the execution point represented by this stack trace element
StackWalker.StackFrame#getMethodType():::Returns the MethodType representing the parameter types and the return type for the method represented by this stack frame.
StackWalker#getInstance():::Returns a StackWalker instance
StrictMath#toIntExact(long):::Returns the value of the long argument; throwing an exception if the value overflows an int.
String#codePointCount(int, int):::Returns the number of Unicode code points in the specified text range of this String
StringBuffer#compareTo(StringBuffer):::Compares two StringBuffer instances lexicographically
StringBuilder#append(StringBuffer):::Appends the specified StringBuffer to this sequence
StringConcatHelper#prepend(int, byte[], byte, boolean):::Prepends the stringly representation of boolean value into buffer, given the coder and final index
StringUTF16#getChars(int, int, byte[]):::This is a variant of Integer#getChars(int, int, byte[]), but for UTF-16 coder.
System#getProperties():::Determines the current system properties
System.Logger#log(Level, String, Object...):::Logs a message with an optional list of parameters.
System.LoggerFinder#getLogger(String, Module):::Returns an instance of Logger Logger for the given module.
Thread#holdsLock(Object):::Returns true if and only if the current thread holds the monitor lock on the specified object
Thread.UncaughtExceptionHandler#uncaughtException(Thread, Throwable):::Method invoked when the given thread terminates due to the given uncaught exception
Thread.WeakClassKey#hashCode():::Returns the identity hash code of the original referent.
ThreadGroup#isDaemon():::Tests if this thread group is a daemon thread group
ThreadLocal#remove():::Removes the current thread's value for this thread-local variable
Throwable#getMessage():::Returns the detail message string of this throwable.
TypeNotPresentException#typeName():::Returns the fully qualified name of the unavailable type.
VersionProps#print(boolean):::In case you were wondering this method is called by java -version.
WeakPairMap#put(K1, K2, V):::Maps the specified key pair to the specified value in this WeakPairMap
AbstractConstantGroup#toString():::Produce a string using the non-resolving list view, where unresolved elements are presented as asterisks.
AbstractConstantGroup.WithCache#fillCache(int):::hook for local subclasses
AbstractValidatingLambdaMetafactory#validateMetafactoryArgs():::Check the meta-factory arguments for errors
BootstrapCallInfo#invocationName():::Returns the method name or constant name for this call.
BootstrapMethodInvoker#invoke(Class, MethodHandle, String, Object, Object, Class):::Factored code for invoking a bootstrap method for invokedynamic or a dynamic constant.
BoundMethodHandle#makeReinvoker(MethodHandle):::A reinvoker MH has this form: lambda (bmh, arg*) { thismh = bmh[0]; invokeBasic(thismh, arg*) }
CallSite#dynamicInvoker():::Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site
ClassSpecializer#metaType():::Return the species metadata type mirror, for type S
ClassSpecializer.SpeciesData#deriveClassName():::Given a key, generate the name of the class which implements the species for that key
ClassSpecializer.Factory#loadSpecies(S):::Get a concrete subclass of the top class for a given combination of bound types.
ConstantBootstraps#getStaticFinal(MethodHandles.Lookup, String, Class, Class):::Returns the value of a static final field.
ConstantCallSite#dynamicInvoker():::Returns this call site's permanent target
ConstantGroup#isPresent(int):::Returns an indication of whether a constant may be available
DelegatingMethodHandle#makeReinvokerForm(MethodHandle, int, Object, boolean, NamedFunction, NamedFunction):::Create a LF which simply reinvokes a target of the given basic type.
DirectMethodHandle#checkReceiver(Object):::Used for interface receiver type checks, by Interface and Special modes.
InnerClassLambdaMetafactory#buildCallSite():::Build the CallSite
InvokerBytecodeGenerator#generateCustomizedCode(LambdaForm, MethodType):::Generate customized bytecode for a given LambdaForm.
Invokers#invokeHandleForm(MethodType, boolean, int):::Returns an adapter for invokeExact or generic invoke, as a MH or constant pool linker
LambdaForm#isSelectAlternative(int):::Check if i-th name is a call to MethodHandleImpl.selectAlternative.
LambdaForm.Name#isLinkerMethodInvoke():::Check if MemberName is a call to MethodHandle.linkToStatic, etc.
LambdaFormBuffer#endEdit():::Finish a transaction.
LambdaMetafactory#altMetafactory(MethodHandles.Lookup, String, MethodType, Object...):::Facilitates the creation of simple "function objects" that implement one or more interfaces by delegation to a provided MethodHandle, after appropriate type adaptation and partial evaluation of arguments
MemberName#isStatic():::Utility method to query the modifier flags of this member.
MemberName.Factory#resolveOrFail(byte, MemberName, Class, Class):::Produce a resolved version of the given member
MethodHandle#withVarargs(boolean):::Adapts this method handle to be #asVarargsCollector variable arity if the boolean flag is true, else #asFixedArity fixed arity
MethodHandleImpl#iterateNext(Iterator):::This method is bound as the step for retrieving the current value from the iterator in MethodHandles#iteratedLoop iterating loops.
MethodHandleInfo#toString(int, Class, String, MethodType):::Returns a string representation for a MethodHandleInfo, given the four parts of its symbolic reference
MethodHandleNatives#setCallSiteTargetNormal(CallSite, MethodHandle):::Tell the JVM that we need to change the target of a CallSite.
MethodHandleProxies#wrapperInstanceTarget(Object):::Produces or recovers a target method handle which is behaviorally equivalent to the unique method of this wrapper instance
MethodHandles#whileLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a while loop from an initializer, a body, and a predicate
MethodHandles.Lookup#checkSecurityManager(Class, MemberName):::Perform necessary access checks
MethodType#toMethodDescriptorString():::Produces a bytecode descriptor representation of the method type
MethodTypeForm#basicType():::Return the basic type derived from the erased type of this MT-form
MutableCallSite#syncAll(MutableCallSite[]):::Performs a synchronization operation on each call site in the given array, forcing all other threads to throw away any cached values previously loaded from the target of any of the call sites
SerializedLambda#getImplMethodName():::Get the name of the implementation method.
StringConcatFactory#makeConcatWithConstants(MethodHandles.Lookup, String, MethodType, String, Object...):::Facilitates the creation of optimized String concatenation methods, that can be used to efficiently concatenate a known number of arguments of known types, possibly after type adaptation and partial evaluation of arguments
SwitchPoint#hasBeenInvalidated():::Determines if this switch point has been invalidated yet
TypeConvertingMethodAdapter#iconst(int):::The following method is copied from org.objectweb.asm.commons.InstructionAdapter
VarHandle#getAndBitwiseAndAcquire(Object...):::Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire
VolatileCallSite#setTarget(MethodHandle):::Updates the target method of this call site, as a volatile variable
Configuration#resolve(ModuleFinder, List, ModuleFinder, Collection):::Resolves a collection of root modules to create a configuration
ModuleDescriptor.Requires#compiledVersion():::Returns the version of the module if recorded at compile-time.
ModuleDescriptor.Exports#hashCode():::Computes a hash code for this module export
ModuleDescriptor.Opens#equals(Object):::Tests this module opens for equality with the given object
ModuleDescriptor.Provides#equals(Object):::Tests this provides for equality with the given object
ModuleDescriptor.Version#toString():::Returns the string from which this version was parsed.
ModuleDescriptor#read(ByteBuffer, Supplier>):::Reads the binary form of a module declaration from a byte buffer as a module descriptor
ModuleDescriptor.Builder#provides(Provides):::Provides a service with one or more implementations
ModuleFinder#ofSystem():::Returns a module finder that locates the system modules
ModuleReader#read(String):::Reads a resource, returning a byte buffer with the contents of the resource
ModuleReference#open():::Opens the module content for reading.
ResolvedModule#reference():::Returns the reference to the module's content.
Resolver#bind():::Augments the set of resolved modules with modules induced by the service-use relation.
Cleaner#register(Object, Runnable):::Registers an object and a cleaning action to run when the object becomes phantom reachable
Cleaner.Cleanable#clean():::Unregisters the cleanable and invokes the cleaning action
PhantomReference#get():::Returns this reference object's referent
Reference#reachabilityFence(Object):::Ensures that the object referenced by the given reference remains strongly reachable, regardless of any prior actions of the program that might otherwise cause the object to become unreachable; thus, the referenced object is not reclaimable by garbage collection at least until after the invocation of this method
ReferenceQueue#remove(long):::Removes the next reference object in this queue, blocking until either one becomes available or the given timeout period expires
SoftReference#get():::Returns this reference object's referent
AccessibleObject#getRoot():::Returns the root AccessibleObject; or null if this object is the root
AnnotatedArrayType#getAnnotatedGenericComponentType():::Returns the potentially annotated generic component type of this array type.
AnnotatedElement#getAnnotationsByType(Class):::Returns annotations that are associated with this element
AnnotatedParameterizedType#getAnnotatedActualTypeArguments():::Returns the potentially annotated actual type arguments of this parameterized type.
AnnotatedType#getType():::Returns the underlying type that this annotated type represents.
AnnotatedTypeVariable#getAnnotatedBounds():::Returns the potentially annotated bounds of this type variable
AnnotatedWildcardType#getAnnotatedLowerBounds():::Returns the potentially annotated lower bounds of this wildcard type
Array#getShort(Object, int):::Returns the value of the indexed component in the specified array object, as a short.
Constructor#newInstance(Object...):::Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters
Executable#getParameterTypes():::Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object
Field#copy():::Package-private routine (exposed to java.lang.Class via ReflectAccess) which returns a copy of this Field
GenericArrayType#getGenericComponentType():::Returns a Type object representing the component type of this array
GenericDeclaration#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order
InvocationHandler#invoke(Object, Method, Object[]):::Processes a method invocation on a proxy instance and returns the result
InvocationTargetException#getTargetException():::Get the thrown target exception
Member#isSynthetic():::Returns true if this member was introduced by the compiler; returns false otherwise.
Method#getReturnType():::Returns a Class object that represents the formal return type of the method represented by this Method object.
Modifier#isNative(int):::Return true if the integer argument includes the native modifier, false otherwise.
Parameter#isSynthetic():::Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.
ParameterizedType#getOwnerType():::Returns a Type object representing the type that this type is a member of
Proxy#toString():::Constructs a string representation of this Proxy
ProxyGenerator#generateProxyClass(String, Class[]):::Generate a public proxy class given a name and a list of proxy interfaces.
Type#getTypeName():::Returns a string describing this type, including information about any type parameters.
TypeVariable#getGenericDeclaration():::Returns the GenericDeclaration object representing the generic declaration declared this type variable.
UndeclaredThrowableException#getUndeclaredThrowable():::Returns the Throwable instance wrapped in this UndeclaredThrowableException, which may be null
WildcardType#getUpperBounds():::Returns an array of Type objects representing the  upper bound(s) of this type variable
BigDecimal#longValue():::Converts this BigDecimal to a long
BigDecimal.StringBuilderHelper#putIntCompact(long):::Places characters representing the intCompact in long into cmpCharArray and returns the offset to the array where the representation starts.
BigInteger#probablePrime(int, Random):::Returns a positive BigInteger that is probably prime, with the specified bitLength
BitSieve#retrieve(BigInteger, int, java.util.Random):::Test probable primes in the sieve and return successful candidates.
MathContext#getPrecision():::Returns the precision setting
MutableBigInteger#binaryGcd(int, int):::Calculate GCD of a and b interpreted as unsigned integers.
SignedMutableBigInteger#signedAdd(SignedMutableBigInteger):::Signed addition built upon unsigned add and subtract.
AbstractPlainDatagramSocketImpl#disconnect():::Disconnects a previously connected socket
AbstractPlainSocketImpl#connect(InetAddress, int):::Creates a socket and connects it to the specified address on the specified port.
Authenticator#getRequestingHost():::Gets the hostname of the site or proxy requesting authentication, or null if not available.
CacheRequest#abort():::Aborts the attempt to cache the response
CacheResponse#getHeaders():::Returns the response headers as a Map.
ContentHandler#getContent(URLConnection, Class[]):::Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object that matches one of the types specified
ContentHandlerFactory#createContentHandler(String):::Creates a new ContentHandler to read an object from a URLStreamHandler.
CookieHandler#setDefault(CookieHandler):::Sets (or unsets) the system-wide cookie handler
CookieManager#setCookiePolicy(CookiePolicy):::To set the cookie policy of this cookie manager
CookiePolicy#shouldAccept(URI, HttpCookie):::Will be called to see whether or not this cookie should be accepted.
CookieStore#removeAll():::Remove all cookies in this cookie store.
DatagramPacket#setData(byte[], int, int):::Set the data buffer for this packet
DatagramSocket#setReuseAddress(boolean):::Enable/disable the SO_REUSEADDR socket option
DatagramSocketImpl#getOption(SocketOption):::Called to get a socket option.
DatagramSocketImplFactory#createDatagramSocketImpl():::Creates a new DatagramSocketImpl instance.
DefaultDatagramSocketImplFactory#createDatagramSocketImpl(boolean):::Creates a new DatagramSocketImpl instance.
FileNameMap#getContentTypeFor(String):::Gets the MIME type for the specified file name.
HostPortrange#toLowerCase(String):::Convert to lower case, and check that all chars are ascii alphanumeric, '-' or '.' only.
HttpCookie#toString():::Constructs a cookie header string representation of this cookie, which is in the format defined by corresponding cookie specification, but without the leading "Cookie:" token.
HttpRetryException#getReason():::Returns a string explaining why the http request could not be retried.
HttpURLConnection#getResponseMessage():::Gets the HTTP response message, if any, returned along with the response code from a server
IDN#toASCII(String, int):::Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490
Inet4Address#getAddress():::Returns the raw IP address of this InetAddress object
Inet6Address#isMCGlobal():::Utility routine to check if the multicast address has global scope.
InetAddress#getLoopbackAddress():::Returns the loopback address
InetSocketAddress#getPort():::Gets the port number.
InMemoryCookieStore#get(URI):::Get all cookies, which:  1) given uri domain-matches with, or, associated with     given uri when added to the cookie store
InterfaceAddress#toString():::Converts this Interface address to a String
JarURLConnection#getMainAttributes():::Returns the main Attributes for the JAR file for this connection.
MulticastSocket#setNetworkInterface(NetworkInterface):::Specify the network interface for outgoing multicast datagrams sent on this socket.
NetworkInterface#getInetAddresses():::Get an Enumeration with all or a subset of the InetAddresses bound to this network interface
PasswordAuthentication#getUserName():::Returns the user name.
ProtocolFamily#name():::Returns the name of the protocol family.
ProxySelector#of(InetSocketAddress):::Returns a ProxySelector which uses the given proxy address for all HTTP and HTTPS requests
ResponseCache#put(URI, URLConnection):::The protocol handler calls this method after a resource has been retrieved, and the ResponseCache must decide whether or not to store the resource in its cache
SecureCacheResponse#getCipherSuite():::Returns the cipher suite in use on the original connection that retrieved the network resource.
ServerSocket#bind(SocketAddress, int):::Binds the ServerSocket to a specific address (IP address and port number)
Socket#setTrafficClass(int):::Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket
SocketCleanable#unregister(FileDescriptor):::Unregister a Cleanable from the FileDescriptor.
SocketImpl#connect(String, int):::Connects this socket to the specified port on the named host.
SocketImplFactory#createSocketImpl():::Creates a new SocketImpl instance.
SocketInputStream#read():::Reads a single byte from the socket.
SocketOption#type():::Returns the type of the socket option value.
SocketOptions#getOption(int):::Fetch the value of an option
SocketOutputStream#finalize():::Overrides finalize, the fd is closed by the Socket.
SocketPermission#implies(Permission):::Checks if this socket permission object "implies" the specified permission
SocketPermissionCollection#elements():::Returns an enumeration of all the SocketPermission objects in the container.
SocksSocketImpl#getInetAddress():::Returns the value of this socket's address field.
URI#getHost():::Returns the host component of this URI
URISyntaxException#getIndex():::Returns an index into the input string of the position at which the parse error occurred, or -1 if this position is not known.
URL#toExternalForm():::Constructs a string representation of this URL
URLClassLoader#close():::Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader
URLConnection#connect():::Opens a communications link to the resource referenced by this URL, if such a connection has not already been established
URLDecoder#decode(String, Charset):::Decodes an application/x-www-form-urlencoded string using a specific java.nio.charset.Charset Charset
URLEncoder#encode(String):::Translates a string into x-www-form-urlencoded format
URLPermission#implies(Permission):::Checks if this URLPermission implies the given permission
URLStreamHandler#setURL(URL, String, String, int, String, String):::Sets the fields of the URL argument to the indicated values
URLStreamHandlerFactory#createURLStreamHandler(String):::Creates a new URLStreamHandler instance with the specified protocol.
AsynchronousByteChannel#read(ByteBuffer, A, CompletionHandler):::Reads a sequence of bytes from this channel into the given buffer
AsynchronousChannel#close():::Closes this channel
AsynchronousChannelGroup#withCachedThreadPool(ExecutorService, int):::Creates an asynchronous channel group with a given thread pool that creates new threads as needed
AsynchronousFileChannel#open(Path, OpenOption...):::Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file
AsynchronousServerSocketChannel#accept(A, CompletionHandler):::Accepts a connection
AsynchronousSocketChannel#getRemoteAddress():::Returns the remote address to which this channel's socket is connected
Channel#close():::Closes this channel
Channels#newInputStream(AsynchronousByteChannel):::Constructs a stream that reads bytes from the given channel
CompletionHandler#completed(V, A):::Invoked when an operation has completed.
DatagramChannel#read(ByteBuffer):::Reads a datagram from this channel
FileChannel#read(ByteBuffer, long):::Reads a sequence of bytes from this channel into the given buffer, starting at the given file position
FileChannel.MapMode#toString():::Returns a string describing this file-mapping mode.
FileLock#release():::Releases this lock
GatheringByteChannel#write(ByteBuffer[]):::Writes a sequence of bytes to this channel from the given buffers
InterruptibleChannel#close():::Closes this channel
MembershipKey#block(InetAddress):::Block multicast datagrams from the given source address
MulticastChannel#close():::Closes this channel
NetworkChannel#supportedOptions():::Returns a set of the socket options supported by this channel
Pipe.SourceChannel#validOps():::Returns an operation set identifying this channel's supported operations
Pipe.SinkChannel#validOps():::Returns an operation set identifying this channel's supported operations
Pipe#open():::Opens a pipe
ReadableByteChannel#read(ByteBuffer):::Reads a sequence of bytes from this channel into the given buffer
ScatteringByteChannel#read(ByteBuffer[], int, int):::Reads a sequence of bytes from this channel into a subsequence of the given buffers
SeekableByteChannel#truncate(long):::Truncates the entity, to which this channel is connected, to the given size
SelectableChannel#isBlocking():::Tells whether or not every I/O operation on this channel will block until it completes
SelectionKey#interestOps(int):::Sets this key's interest set to the given value
Selector#select(Consumer):::Selects and performs an action on the keys whose corresponding channels are ready for I/O operations
ServerSocketChannel#socket():::Retrieves a server socket associated with this channel
SocketChannel#getRemoteAddress():::Returns the remote address to which this channel's socket is connected
WritableByteChannel#write(ByteBuffer):::Writes a sequence of bytes to this channel from the given buffer
AbstractInterruptibleChannel#end(boolean):::Marks the end of an I/O operation that might block indefinitely
AbstractSelectableChannel#provider():::Returns the provider that created this channel.
AbstractSelectionKey#cancel():::Cancels this key
AbstractSelector#begin():::Marks the beginning of an I/O operation that might block indefinitely
AsynchronousChannelProvider#provider():::Returns the system-wide default asynchronous channel provider for this invocation of the Java virtual machine
SelectorProvider#openSocketChannel():::Opens a socket channel.
Charset#displayName(Locale):::Returns this charset's human-readable name for the given locale
CharsetDecoder#charset():::Returns the charset that created this decoder.
CharsetEncoder#malformedInputAction():::Returns this encoder's current action for malformed-input errors.
CoderResult#isMalformed():::Tells whether or not this object describes a malformed-input error.
CodingErrorAction#toString():::Returns a string describing this action.
IllegalCharsetNameException#getCharsetName():::Retrieves the illegal charset name.
MalformedInputException#getMessage():::Returns the message.
UnmappableCharacterException#getMessage():::Returns the message.
UnsupportedCharsetException#getCharsetName():::Retrieves the name of the unsupported charset.
CharsetProvider#charsetForName(String):::Retrieves a charset for the given charset name.
Buffer#createSameBufferException():::Returns an IllegalArgumentException indicating that the source and target are the same Buffer
ByteBuffer#duplicate():::Creates a new byte buffer that shares this buffer's content
ByteOrder#toString():::Constructs a string describing this object
CharBuffer#append(CharSequence, int, int):::Appends a subsequence of the  specified character sequence  to this buffer&nbsp;&nbsp;(optional operation)
DoubleBuffer#allocate(int):::Allocates a new double buffer
FloatBuffer#isDirect():::Tells whether or not this float buffer is direct.
IntBuffer#duplicate():::Creates a new int buffer that shares this buffer's content
LongBuffer#asReadOnlyBuffer():::Creates a new, read-only long buffer that shares this buffer's content
MappedByteBuffer#isLoaded():::Tells whether or not this buffer's content is resident in physical memory
ShortBuffer#slice():::Creates a new short buffer whose content is a shared subsequence of this buffer's content
AclEntry.Builder#setPrincipal(UserPrincipal):::Sets the principal component of this builder.
AclEntry#newBuilder(AclEntry):::Constructs a new builder with the components of an existing ACL entry.
AclFileAttributeView#getAcl():::Reads the access control list
AttributeView#name():::Returns the name of the attribute view.
BasicFileAttributes#isOther():::Tells whether the file is something other than a regular file, directory, or symbolic link.
BasicFileAttributeView#readAttributes():::Reads the basic file attributes as a bulk operation
DosFileAttributes#isReadOnly():::Returns the value of the read-only attribute
DosFileAttributeView#name():::Returns the name of the attribute view
FileAttribute#value():::Returns the attribute value.
FileOwnerAttributeView#name():::Returns the name of the attribute view
FileTime#fromMillis(long):::Returns a FileTime representing the given value in milliseconds.
PosixFileAttributes#owner():::Returns the owner of the file.
PosixFileAttributeView#setPermissions(Set):::Updates the file permissions.
PosixFilePermissions#fromString(String):::Returns the set of permissions corresponding to a given String representation
UserDefinedFileAttributeView#size(String):::Returns the size of the value of a user-defined attribute.
UserPrincipalLookupService#lookupPrincipalByName(String):::Lookup a user principal by name.
UserPrincipalNotFoundException#getName():::Returns the user principal name if this exception was created with the user principal name that was not found, otherwise null.
CopyMoveHelper#moveToForeignTarget(Path, Path, CopyOption...):::Simple move implements as copy+delete for use when source and target are associated with different providers
DirectoryIteratorException#getCause():::Returns the cause of this exception.
DirectoryStream.Filter#accept(T):::Decides if the given directory entry should be accepted or filtered.
DirectoryStream#iterator():::Returns the iterator associated with this DirectoryStream.
Files#walk(Path, FileVisitOption...):::Return a Stream that is lazily populated with Path by walking the file tree rooted at a given starting file
FileStore#supportsFileAttributeView(Class):::Tells whether or not this file store supports the file attributes identified by the given file attribute view
FileSystemException#getMessage():::Returns the detail message string.
FileSystems#getDefault():::Returns the default FileSystem
FileTreeWalker#walk(Path):::Start walking from the given file.
FileVisitor#visitFileFailed(T, IOException):::Invoked for a file that could not be visited
InvalidPathException#getMessage():::Returns a string describing the error
Path#endsWith(Path):::Tests if this path ends with the given path
PathMatcher#matches(Path):::Tells if given path matches this matcher's pattern.
Paths#get(URI):::Converts the given URI to a Path object.
SecureDirectoryStream#getFileAttributeView(T, Class, LinkOption...):::Returns a new file attribute view to access the file attributes of a file in this directory
SimpleFileVisitor#visitFileFailed(T, IOException):::Invoked for a file that could not be visited
TempFileHelper#createTempDirectory(Path, String, FileAttribute[]):::Creates a temporary directory in the given directory, or in the temporary directory if dir is null.
Watchable#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...):::Registers an object with a watch service
WatchEvent.Kind#type():::Returns the type of the WatchEvent#context context value.
WatchEvent.Modifier#name():::Returns the name of the modifier.
WatchEvent#kind():::Returns the event kind.
WatchKey#pollEvents():::Retrieves and removes all pending events for this watch key, returning a List of the events that were retrieved
WatchService#close():::Closes this watch service
FileSystemProvider#newOutputStream(Path, OpenOption...):::Opens or creates a file, returning an output stream that may be used to write bytes to the file
FileTypeDetector#probeContentType(Path):::Probes the given file to guess its content type
Acl#removeEntry(Principal, AclEntry):::Removes an ACL entry from this ACL.
Group#removeMember(Principal):::Removes the specified member from the group.
Owner#addOwner(Principal, Principal):::Adds an owner
Permission#toString():::Returns a string describing this Permission
Certificate#toString(boolean):::Returns a string that represents the contents of the certificate.
Certificate.CertificateRep#readResolve():::Resolve the Certificate Object.
CertificateFactory#generateCRL(InputStream):::Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream
CertificateFactorySpi#engineGenerateCertPath(InputStream):::Generates a CertPath object and initializes it with the data read from the InputStream inStream
CertificateRevokedException#getInvalidityDate():::Returns the invalidity date, as specified in the Invalidity Date extension of this CertificateRevokedException
CertPath#getEncoded(String):::Returns the encoded form of this certification path, using the specified encoding.
CertPath.CertPathRep#readResolve():::Returns a CertPath constructed from the type and data.
CertPathBuilder#build(CertPathParameters):::Attempts to build a certification path using the specified algorithm parameter set.
CertPathBuilderResult#getCertPath():::Returns the built certification path.
CertPathBuilderSpi#engineGetRevocationChecker():::Returns a CertPathChecker that this implementation uses to check the revocation status of certificates
CertPathChecker#check(Certificate):::Performs the check(s) on the specified certificate using its internal state
CertPathHelperImpl#initialize():::Initialize the helper framework
CertPathParameters#clone():::Makes a copy of this CertPathParameters
CertPathValidator#getInstance(String):::Returns a CertPathValidator object that implements the specified algorithm
CertPathValidatorException#getReason():::Returns the reason that the validation failed
CertPathValidatorResult#clone():::Makes a copy of this CertPathValidatorResult
CertPathValidatorSpi#engineValidate(CertPath, CertPathParameters):::Validates the specified certification path using the specified algorithm parameter set
CertSelector#match(Certificate):::Decides whether a Certificate should be selected.
CertStore#getDefaultType():::Returns the default CertStore type as specified by the certstore.type security property, or the string "LDAP" if no such property exists
CertStoreParameters#clone():::Makes a copy of this CertStoreParameters
CertStoreSpi#engineGetCertificates(CertSelector):::Returns a Collection of Certificates that match the specified selector
CollectionCertStoreParameters#toString():::Returns a formatted string describing the parameters.
CRL#isRevoked(Certificate):::Checks whether the given certificate is on this CRL.
CRLSelector#clone():::Makes a copy of this CRLSelector
Extension#getValue():::Gets the extensions's DER-encoded value
LDAPCertStoreParameters#clone():::Returns a copy of this object
PKIXBuilderParameters#toString():::Returns a formatted string describing the parameters.
PKIXCertPathBuilderResult#getCertPath():::Returns the built and validated certification path
PKIXCertPathChecker#getSupportedExtensions():::Returns an immutable Set of X.509 certificate extensions that this PKIXCertPathChecker supports (i.e
PKIXCertPathValidatorResult#getTrustAnchor():::Returns the TrustAnchor describing the CA that served as a trust anchor for the certification path.
PKIXParameters#setTargetCertConstraints(CertSelector):::Sets the required constraints on the target certificate
PKIXRevocationChecker#getOptions():::Gets the revocation options.
PolicyNode#getParent():::Returns the parent of this node, or null if this is the root node.
PolicyQualifierInfo#getPolicyQualifierId():::Returns the policyQualifierId field of this PolicyQualifierInfo
TrustAnchor#getNameConstraints():::Returns the name constraints parameter
URICertStoreParameters#toString():::Returns a formatted string describing the parameters including the URI used to construct this object.
X509Certificate#getSerialNumber():::Gets the serialNumber value from the certificate
X509CertSelector#makeGeneralNameInterface(int, Object):::Make a GeneralNameInterface out of a name type (0-8) and an Object that may be a byte array holding the ASN.1 DER encoded name or a String form of the name
X509CRL#getRevokedCertificate(X509Certificate):::Get the CRL entry, if any, for the given certificate
X509CRLEntry#getEncoded():::Returns the ASN.1 DER-encoded form of this CRL Entry, that is the inner SEQUENCE.
X509CRLSelector#setDateAndTime(Date, long):::Sets the dateAndTime criterion and allows for the specified clock skew (in milliseconds) when checking against the validity period of the CRL.
X509Extension#getExtensionValue(String):::Gets the DER-encoded OCTET string for the extension value (extnValue) identified by the passed-in oid String
AccessControlContext#getContext():::Returns this context's context.
AccessControlException#getPermission():::Gets the Permission object associated with this exception, or null if there was no corresponding Permission object.
AccessController#doPrivilegedWithCombiner(PrivilegedAction):::Performs the specified PrivilegedAction with privileges enabled
AlgorithmConstraints#permits(Set, Key):::Determines whether a key is granted permission for the specified cryptographic primitives
AlgorithmParameterGenerator#init(int, SecureRandom):::Initializes this parameter generator for a certain size and source of randomness.
AlgorithmParameterGeneratorSpi#engineGenerateParameters():::Generates the parameters.
AlgorithmParameters#getEncoded():::Returns the parameters in their primary encoding format
AlgorithmParametersSpi#engineGetEncoded():::Returns the parameters in their primary encoding format
AllPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing AllPermission objects.
AllPermissionCollection#elements():::Returns an enumeration of all the AllPermission objects in the container.
AuthProvider#setCallbackHandler(CallbackHandler):::Set a CallbackHandler
BasicPermission#getActions():::Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for a BasicPermission.
BasicPermissionCollection#elements():::Returns an enumeration of all the BasicPermission objects in the container.
CodeSigner#equals(Object):::Tests for equality between the specified object and this code signer
CodeSource#getCodeSigners():::Returns the code signers associated with this CodeSource
DigestInputStream#getMessageDigest():::Returns the message digest associated with this stream.
DigestOutputStream#setMessageDigest(MessageDigest):::Associates the specified message digest with this stream.
DomainCombiner#combine(ProtectionDomain[], ProtectionDomain[]):::Modify or update the provided ProtectionDomains
DomainLoadStoreParameter#getProtectionParams():::Gets the keystore protection parameters for keystores in this domain.
DrbgParameters.Instantiation#getStrength():::Returns the security strength in bits.
DrbgParameters.NextBytes#getAdditionalInput():::Returns the requested additional input.
DrbgParameters.Reseed#getAdditionalInput():::Returns the requested additional input.
DrbgParameters#instantiation(int, Capability, byte[]):::Generates a DrbgParameters.Instantiation object.
Guard#checkGuard(Object):::Determines whether or not to allow access to the guarded object object
GuardedObject#getObject():::Retrieves the guarded object, or throws an exception if access to the guarded object is denied by the guard.
Identity#toString():::Returns a short string describing this identity, telling its name and its scope (if any)
IdentityScope#getIdentity(String):::Returns the identity in this scope with the specified name (if any).
Key#getEncoded():::Returns the key in its primary encoding format, or null if this key does not support encoding.
KeyFactory#getProvider():::Returns the provider of this key factory object.
KeyFactorySpi#engineTranslateKey(Key):::Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.
KeyPair#getPrivate():::Returns a reference to the private key component of this key pair.
KeyPairGenerator#getInstance(String, Provider):::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm
KeyPairGeneratorSpi#initialize(int, SecureRandom):::Initializes the key pair generator for a certain keysize, using the default parameter set.
KeyRep#readResolve():::Resolve the Key object
KeyStore.LoadStoreParameter#getProtectionParameter():::Gets the parameter used to protect keystore data.
KeyStore.PasswordProtection#isDestroyed():::Determines if password has been cleared.
KeyStore.CallbackHandlerProtection#getCallbackHandler():::Returns the CallbackHandler.
KeyStore.Entry#getAttributes():::Retrieves the attributes associated with an entry.
KeyStore.Entry.Attribute#getName():::Returns the attribute's name.
KeyStore.PrivateKeyEntry#getPrivateKey():::Gets the PrivateKey from this entry.
KeyStore.SecretKeyEntry#getSecretKey():::Gets the SecretKey from this entry.
KeyStore.TrustedCertificateEntry#toString():::Returns a string representation of this TrustedCertificateEntry.
KeyStore#getCertificate(String):::Returns the certificate associated with the given alias
KeyStore.Builder#getProtectionParameter(String):::Returns the ProtectionParameters that should be used to obtain the KeyStore.Entry Entry with the given alias
KeyStoreSpi#engineAliases():::Lists all the alias names of this keystore.
MessageDigest#digest():::Completes the hash computation by performing final operations such as padding
MessageDigest.Delegate#clone():::Returns a clone if the delegate is cloneable.
MessageDigestSpi#engineUpdate(ByteBuffer):::Update the digest using the specified ByteBuffer
PermissionCollection#add(Permission):::Adds a permission object to the current collection of permission objects.
Permissions#add(Permission):::Adds a permission object to the PermissionCollection for the class the permission belongs to
PermissionsHash#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".
PKCS12Attribute#getValue():::Returns the attribute's ASN.1 DER-encoded value as a string
Policy#getPolicyNoCheck():::Returns the installed Policy object, skipping the security check
PolicySpi#engineGetPermissions(CodeSource):::Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource
Principal#toString():::Returns a string representation of this principal.
PrivilegedAction#run():::Performs the computation
PrivilegedActionException#getCause():::Returns the cause of this exception (the exception thrown by the privileged computation that resulted in this PrivilegedActionException).
ProtectionDomain#getClassLoader():::Returns the ClassLoader of this domain.
Provider#clear():::Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider
Provider.Service#getAlgorithm():::Return the name of the algorithm of this service
SecureClassLoader#defineClass(String, byte[], int, int, CodeSource):::Converts an array of bytes into an instance of class Class, with an optional CodeSource
SecureRandom#getInstance(String, SecureRandomParameters, Provider):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request
SecureRandomSpi#engineGetParameters():::Returns the effective SecureRandomParameters for this SecureRandom instance.
Security#getProviders(Map):::Returns an array containing all installed providers that satisfy the specified selection criteria, or null if no such providers have been installed
Signature#setParameter(String, Object):::Sets the specified algorithm parameter to the specified value
SignatureSpi#engineGetParameter(String):::Gets the value of the specified algorithm parameter
SignedObject#verify(PublicKey, Signature):::Verifies that the signature in this SignedObject is the valid signature for the object stored inside, with the given verification key, using the designated verification engine.
Signer#getPrivateKey():::Returns this signer's private key
Timestamp#getTimestamp():::Returns the date and time when the timestamp was generated.
UnresolvedPermission#getActions():::Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for an UnresolvedPermission
UnresolvedPermissionCollection#add(Permission):::Adds a permission to this UnresolvedPermissionCollection
URIParameter#getURI():::Returns the URI.
DSAKey#getParams():::Returns the DSA-specific key parameters
DSAKeyPairGenerator#initialize(DSAParams, SecureRandom):::Initializes the key pair generator using the DSA family parameters (p,q and g) and an optional SecureRandom bit source
DSAParams#getP():::Returns the prime, p.
DSAPrivateKey#getX():::Returns the value of the private key, x.
DSAPublicKey#getY():::Returns the value of the public key, y.
ECKey#getParams():::Returns the domain parameters associated with this key
ECPrivateKey#getS():::Returns the private value S.
ECPublicKey#getW():::Returns the public point W.
RSAKey#getModulus():::Returns the modulus.
RSAMultiPrimePrivateCrtKey#getOtherPrimeInfo():::Returns the otherPrimeInfo or null if there are only two prime factors (p and q).
RSAPrivateCrtKey#getPrimeExponentP():::Returns the primeExponentP.
RSAPrivateKey#getPrivateExponent():::Returns the private exponent.
RSAPublicKey#getPublicExponent():::Returns the public exponent.
XECKey#getParams():::Returns the algorithm parameters associated with the key.
XECPrivateKey#getScalar():::Get the scalar value encoded as an unpruned byte array
XECPublicKey#getU():::Get the u coordinate of the point.
DSAGenParameterSpec#getPrimePLength():::Returns the desired length of the prime P of the to-be-generated DSA domain parameters in bits.
DSAParameterSpec#getQ():::Returns the sub-prime q.
DSAPrivateKeySpec#getQ():::Returns the sub-prime q.
DSAPublicKeySpec#getP():::Returns the prime p.
ECField#getFieldSize():::Returns the field size in bits
ECFieldF2m#getM():::Returns the value m of this characteristic 2 finite field.
ECFieldFp#hashCode():::Returns a hash code value for this prime finite field.
ECParameterSpec#getGenerator():::Returns the generator which is also known as the base point.
ECPoint#hashCode():::Returns a hash code value for this elliptic curve point.
ECPrivateKeySpec#getS():::Returns the private value S.
ECPublicKeySpec#getW():::Returns the public point W.
EllipticCurve#hashCode():::Returns a hash code value for this elliptic curve.
EncodedKeySpec#getAlgorithm():::Returns the name of the algorithm of the encoded key.
MGF1ParameterSpec#getDigestAlgorithm():::Returns the algorithm name of the message digest used by the mask generation function.
NamedParameterSpec#getName():::Returns the standard name that determines the algorithm parameters.
PKCS8EncodedKeySpec#getFormat():::Returns the name of the encoding format associated with this key specification.
PSSParameterSpec#getSaltLength():::Returns the salt length in bytes.
RSAKeyGenParameterSpec#getKeyParams():::Returns the parameters to be associated with key.
RSAMultiPrimePrivateCrtKeySpec#getPrimeQ():::Returns the primeQ.
RSAOtherPrimeInfo#getExponent():::Returns the prime's exponent.
RSAPrivateCrtKeySpec#getPrimeExponentP():::Returns the primeExponentP.
RSAPrivateKeySpec#getParams():::Returns the parameters associated with this key, may be null if not present.
RSAPublicKeySpec#getModulus():::Returns the modulus.
X509EncodedKeySpec#getEncoded():::Returns the key bytes, encoded according to the X.509 standard.
XECPrivateKeySpec#getScalar():::Get the scalar value encoded as an unpruned byte array
XECPublicKeySpec#getParams():::Get the algorithm parameters that define the curve and other settings.
AttributedCharacterIterator.Attribute#equals(Object):::Compares two objects for equality
AttributedCharacterIterator#getRunStart(Set):::Returns the index of the first character of the run with respect to the given attributes containing the current character.
AttributedString#addAttribute(Attribute, Object):::Adds an attribute to the entire string.
Bidi#getBaseLevel():::Return the base level (0 if left-to-right, 1 if right-to-left).
BreakIterator#getAvailableLocales():::Returns an array of all locales for which the get*Instance methods of this class can return localized instances
CharacterIterator#getEndIndex():::Returns the end index of the text
CharacterIteratorFieldDelegate#getIterator(String):::Returns an AttributedCharacterIterator that can be used to iterate over the resulting formatted String.
ChoiceFormat#applyPattern(String):::Sets the pattern.
CollationElementIterator#getOffset():::Returns the character offset in the original text corresponding to the next collation element
CollationKey#getSourceString():::Returns the String that this CollationKey represents.
Collator#hashCode():::Generates the hash code for this Collator.
DateFormat#format(Date, StringBuffer, FieldPosition):::Formats a Date into a date-time string
DateFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.
DateFormatSymbols#getZoneStrings():::Gets time zone strings
DecimalFormat#getMinimumIntegerDigits():::Gets the minimum number of digits allowed in the integer portion of a number
DecimalFormatSymbols#getPatternSeparator():::Gets the character used to separate positive and negative subpatterns in a pattern.
DigitList#set(boolean, BigDecimal, int, boolean):::Set the digit list to a representation of the given BigDecimal value
FieldPosition#setEndIndex(int):::Sets the end index
Format#parseObject(String):::Parses text from the beginning of the given string to produce an object
Format.FieldDelegate#formatted(Format.Field, Object, int, int, StringBuffer):::Notified when a particular region of the String is formatted
MergeCollation#getCount():::gets count of separate entries
MessageFormat#setFormatsByArgumentIndex(Format[]):::Sets the formats to use for the values passed into format methods or returned from parse methods
MessageFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.
Normalizer#normalize(CharSequence, Form):::Normalize a sequence of char values
NumberFormat#parse(String):::Parses text from the beginning of the given string to produce a number
NumberFormat.Field#readResolve():::Resolves instances being deserialized to the predefined constants.
ParseException#getErrorOffset():::Returns the position where the error was found.
ParsePosition#equals(Object):::Overrides equals
PatternEntry#getStrength():::Gets the strength of the entry.
RBCollationTables.BuildAPI#fillInTables(boolean, boolean, UCompactIntArray, Vector>, Vector, IntHashtable, short, short):::This function is used by RBTableBuilder to fill in all the members of this object
RBCollationTables#getUnicodeOrder(int):::Get the comarison order of a character from the collation table.
RuleBasedCollationKey#toByteArray():::Converts the RuleBasedCollationKey to a sequence of bits
RuleBasedCollator#hashCode():::Generates the hash code for the table-based collation object
SimpleDateFormat#formatToCharacterIterator(Object):::Formats an Object producing an AttributedCharacterIterator
StringCharacterIterator#equals(Object):::Compares the equality of two StringCharacterIterator objects.
BreakIteratorProvider#getSentenceInstance(Locale):::Returns a new BreakIterator instance for sentence breaks for the given locale.
CollatorProvider#getInstance(Locale):::Returns a new Collator instance for the specified locale.
DateFormatProvider#getTimeInstance(int, Locale):::Returns a new DateFormat instance which formats time with the given formatting style for the specified locale.
DateFormatSymbolsProvider#getInstance(Locale):::Returns a new DateFormatSymbols instance for the specified locale.
DecimalFormatSymbolsProvider#getInstance(Locale):::Returns a new DecimalFormatSymbols instance for the specified locale.
NumberFormatProvider#getCurrencyInstance(Locale):::Returns a new NumberFormat instance which formats monetary values for the specified locale.
AbstractChronology#of(String):::Obtains an instance of Chronology from a chronology ID or calendar system type
ChronoLocalDate#toString():::Outputs this date as a String
ChronoLocalDateImpl#ensureValid(Chronology, Temporal):::Casts the Temporal to ChronoLocalDate ensuring it bas the specified chronology.
ChronoLocalDateTime#timeLineOrder():::Gets a comparator that compares ChronoLocalDateTime in time-line order ignoring the chronology
ChronoLocalDateTimeImpl#ensureValid(Chronology, Temporal):::Casts the Temporal to ChronoLocalDateTime ensuring it bas the specified chronology.
Chronology#epochSecond(Era, int, int, int, int, int, int, ZoneOffset):::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z
ChronoPeriod#minus(TemporalAmount):::Returns a copy of this period with the specified period subtracted
ChronoPeriodImpl#writeReplace():::Writes the Chronology using a dedicated serialized form
ChronoZonedDateTime#equals(Object):::Checks if this date-time is equal to another date-time
ChronoZonedDateTimeImpl#ofInstant(Chronology, Instant, ZoneId):::Obtains an instance from an instant using the specified time-zone.
Era#getDisplayName(TextStyle, Locale):::Gets the textual representation of this era
HijrahChronology#getMaximumDayOfYear():::Returns maximum day-of-year.
HijrahDate#lengthOfMonth():::Returns the length of the month represented by this date
IsoChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.
JapaneseChronology#date(int, int, int):::Obtains a local date in Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields
JapaneseDate#of(int, int, int):::Obtains a JapaneseDate representing a date in the Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields
JapaneseEra#range(TemporalField):::Gets the range of valid values for the specified field
MinguoChronology#dateYearDay(int, int):::Obtains a local date in Minguo calendar system from the proleptic-year and day-of-year fields.
MinguoDate#getEra():::Gets the era applicable at this date
Ser#readOffset(DataInput):::Reads the state from the stream.
ThaiBuddhistChronology#isLeapYear(long):::Checks if the specified year is a leap year
ThaiBuddhistDate#getChronology():::Gets the chronology of this date, which is the Thai Buddhist calendar system
Clock#tickMillis(ZoneId):::Obtains a clock that returns the current instant ticking in whole milliseconds using the best available system clock
Duration#getSeconds():::Gets the number of seconds in this duration
Instant#range(TemporalField):::Gets the range of valid values for the specified field
LocalDate#of(int, int, int):::Obtains an instance of LocalDate from a year, month and day
LocalDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12
LocalTime#minusMinutes(long):::Returns a copy of this LocalTime with the specified number of minutes subtracted
MonthDay#atYear(int):::Combines this month-day with a year to create a LocalDate
OffsetDateTime#minusNanos(long):::Returns a copy of this OffsetDateTime with the specified number of nanoseconds subtracted
OffsetTime#hashCode():::A hash code for this time.
Period#parse(CharSequence):::Obtains a Period from a text string such as PnYnMnD
Year#query(TemporalQuery):::Queries this year using the specified query
YearMonth#atDay(int):::Combines this year-month with a day-of-month to create a LocalDate
ZonedDateTime#withDayOfMonth(int):::Returns a copy of this ZonedDateTime with the day-of-month altered
ZoneId#normalized():::Normalizes the time-zone ID, returning a ZoneOffset where possible
ZoneOffset#ofHoursMinutesSeconds(int, int, int):::Obtains an instance of ZoneOffset using an offset in hours, minutes and seconds
ZoneRegion#ofId(String, boolean):::Obtains an instance of ZoneId from an identifier.
DateTimeFormatter#ofPattern(String, Locale):::Creates a formatter using the specified pattern and locale
DateTimeFormatterBuilder#appendGenericZoneText(TextStyle, Set):::Appends the generic time-zone name, such as 'Pacific Time', to the formatter
DateTimeFormatterBuilder.DateTimePrinterParser#format(DateTimePrintContext, StringBuilder):::Prints the date-time object to the buffer
DateTimeFormatterBuilder.CompositePrinterParser#withOptional(boolean):::Returns a copy of this printer-parser with the optional flag changed.
DateTimeFormatterBuilder.NumberPrinterParser#setValue(DateTimeParseContext, long, int, int):::Stores the value.
DateTimeFormatterBuilder.ReducedPrinterParser#withFixedWidth():::Returns a new instance with fixed width flag set.
DateTimeFormatterBuilder.FractionPrinterParser#isFixedWidth(DateTimeParseContext):::For FractionPrinterPrinterParser, the width is fixed if context is sttrict, minWidth equal to maxWidth and decimalpoint is absent.
DateTimeFormatterBuilder.ZoneIdPrinterParser#parse(DateTimeParseContext, CharSequence, int):::This implementation looks for the longest matching string
DateTimeFormatterBuilder.PrefixTree#add(String, String):::Adds a pair of {key, value} into the prefix tree.
DateTimeFormatterBuilder.WeekBasedFieldPrinterParser#withFixedWidth():::Returns a new instance with fixed width flag set.
DateTimeParseContext#getDecimalStyle():::Gets the DecimalStyle
DateTimeParseException#getParsedString():::Returns the string that was being parsed.
DateTimePrintContext#getValue(TemporalQuery):::Gets a value using a query.
DateTimeTextProvider#getText(TemporalField, long, TextStyle, Locale):::Gets the text for the specified field, locale and style for the purpose of formatting
DateTimeTextProvider.LocaleStore#getTextIterator(TextStyle):::Gets an iterator of text to field for the specified style for the purpose of parsing
DecimalStyle#withZeroDigit(char):::Returns a copy of the info with a new character that represents zero
Parsed#resolve(ResolverStyle, Set):::Resolves the fields in this context.
Temporal#minus(long, TemporalUnit):::Returns an object of the same type as this object with the specified period subtracted
TemporalAccessor#query(TemporalQuery):::Queries this date-time
TemporalAdjuster#adjustInto(Temporal):::Adjusts the specified temporal object
TemporalAdjusters#firstDayOfNextYear():::Returns the "first day of next year" adjuster, which returns a new date set to the first day of the next year
TemporalAmount#get(TemporalUnit):::Returns the value of the requested unit
TemporalField#isSupportedBy(TemporalAccessor):::Checks if this field is supported by the temporal object
TemporalQueries#offset():::A query for ZoneOffset returning null if not found
TemporalQuery#queryFrom(TemporalAccessor):::Queries the specified temporal object
TemporalUnit#between(Temporal, Temporal):::Calculates the amount of time between two temporal objects
ValueRange#getMinimum():::Gets the minimum value that the field can take
WeekFields#of(Locale):::Obtains an instance of WeekFields appropriate for a locale
WeekFields.ComputedDayOfField#ofWeekOfWeekBasedYearField(WeekFields):::Returns a field to access the week of week-based-year, computed based on a WeekFields.
ZoneOffsetTransition#getDateTimeBefore():::Gets the local transition date-time, as would be expressed with the 'before' offset
ZoneOffsetTransitionRule#getMonth():::Gets the month of the transition
ZoneRules#isDaylightSavings(Instant):::Checks if the specified instant is in daylight savings
ZoneRulesProvider#registerProvider(ZoneRulesProvider):::Registers a zone rules provider
AtomicBoolean#compareAndExchange(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicInteger#doubleValue():::Returns the current value of this AtomicInteger as a double after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicIntegerArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.
AtomicIntegerFieldUpdater#getAndIncrement(T):::Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicLong#incrementAndGet():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicLongArray#updateAndGet(int, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value
AtomicLongFieldUpdater#weakCompareAndSet(T, long, long):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicMarkableReference#set(V, boolean):::Unconditionally sets the value of both the reference and mark.
AtomicReference#weakCompareAndSetPlain(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicReferenceArray#accumulateAndGet(int, E, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value
AtomicReferenceFieldUpdater#getAndUpdate(T, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value
AtomicStampedReference#compareAndSet(V, V, int, int):::Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.
DoubleAccumulator#intValue():::Returns the #get current value as an int after a narrowing primitive conversion.
DoubleAdder#longValue():::Returns the #sum as a long after a narrowing primitive conversion.
LongAccumulator#get():::Returns the current value
LongAdder#increment():::Equivalent to add(1).
Striped64#casCellsBusy():::CASes the cellsBusy field from 0 to 1 to acquire lock.
AbstractExecutorService#newTaskFor(Callable):::Returns a RunnableFuture for the given callable task.
ArrayBlockingQueue#put(E):::Inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full.
ArrayBlockingQueue.Itrs#queueIsEmpty():::Called whenever the queue becomes empty
BlockingDeque#offerLast(E):::Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
BlockingQueue#remainingCapacity():::Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or Integer.MAX_VALUE if there is no intrinsic limit
Callable#call():::Computes a result, or throws an exception if unable to do so.
CompletableFuture#tryPushStack(Completion):::Returns true if successfully pushed c onto stack.
CompletableFuture.Completion#isLive():::Returns true if possibly still triggerable
CompletableFuture.UniCompletion#claim():::Returns true if action can be run
CompletionService#poll(long, TimeUnit):::Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.
CompletionStage#runAfterBothAsync(CompletionStage, Runnable, Executor):::Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action using the supplied executor
ConcurrentHashMap.Node#find(int, Object):::Virtualized support for map.get(); overridden in subclasses.
ConcurrentHashMap#computeIfPresent(K, BiFunction):::If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value
ConcurrentHashMap.TreeNode#findTreeNode(int, Object, Class):::Returns the TreeNode (or null if not found) for the given key starting at given root.
ConcurrentHashMap.TreeBin#checkInvariants(TreeNode):::Checks invariants recursively for the tree of Nodes rooted at t.
ConcurrentHashMap.Traverser#advance():::Advances if possible, returning next valid node, or null if none.
ConcurrentHashMap.MapEntry#setValue(V):::Sets our entry's value and writes through to the map
ConcurrentHashMap.CollectionView#getMap():::Returns the map backing this view.
ConcurrentHashMap.KeySetView#addAll(Collection):::Adds all of the elements in the specified collection to this set, as if by calling #add on each one.
ConcurrentHashMap.BulkTask#advance():::Same as Traverser version.
ConcurrentLinkedDeque#first():::Returns the first node, the unique node p for which:     p.prev == null && p.next != p The returned node may or may not be logically deleted
ConcurrentLinkedQueue#contains(Object):::Returns true if this queue contains the specified element
ConcurrentMap#putIfAbsent(K, V):::If the specified key is not already associated with a value, associates it with the given value
ConcurrentNavigableMap#descendingKeySet():::Returns a reverse order NavigableSet view of the keys contained in this map
ConcurrentSkipListMap#removeEntryIf(Predicate>):::Helper method for EntrySet.removeIf.
ConcurrentSkipListMap.Iter#advance(Node):::Advances next to higher entry.
ConcurrentSkipListMap.SubMap#loNode(Comparator):::Returns lowest node
ConcurrentSkipListSet#remove(Object):::Removes the specified element from this set if it is present
CopyOnWriteArrayList#indexOf(E, int):::Returns the index of the first occurrence of the specified element in this list, searching forwards from index, or returns -1 if the element is not found
CopyOnWriteArrayList.COWIterator#add(E):::Not supported
CopyOnWriteArraySet#addAll(Collection):::Adds all of the elements in the specified collection to this set if they're not already present
CountDownLatch#await():::Causes the current thread to wait until the latch has counted down to zero, unless the thread is Thread#interrupt interrupted
CountedCompleter#onCompletion(CountedCompleter):::Performs an action when method #tryComplete is invoked and the pending count is zero, or when the unconditional method #complete is invoked
CyclicBarrier#getNumberWaiting():::Returns the number of parties currently waiting at the barrier
Delayed#getDelay(TimeUnit):::Returns the remaining delay associated with this object, in the given time unit.
DelayQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present, whether or not it has expired.
Exchanger#exchange(V, long, TimeUnit):::Waits for another thread to arrive at this exchange point (unless the current thread is Thread#interrupt interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return
Executor#execute(Runnable):::Executes the given command at some time in the future
Executors#newSingleThreadScheduledExecutor(ThreadFactory):::Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically
ExecutorService#isShutdown():::Returns true if this executor has been shut down.
Flow.Publisher#subscribe(Subscriber):::Adds the given Subscriber if possible
Flow.Subscriber#onNext(T):::Method invoked with a Subscription's next item
Flow.Subscription#request(long):::Adds the given number n of items to the current unfulfilled demand for this subscription
Flow#defaultBufferSize():::Returns a default value for Publisher or Subscriber buffering, that may be used in the absence of other constraints.
ForkJoinPool.ForkJoinWorkerThreadFactory#newThread(ForkJoinPool):::Returns a new worker thread operating in the given pool
ForkJoinPool.WorkQueue#queueSize():::Returns the approximate number of tasks in the queue.
ForkJoinPool#helpComplete(WorkQueue, CountedCompleter, int):::Tries to steal and run tasks within the target's computation
ForkJoinPool.ManagedBlocker#isReleasable():::Returns true if blocking is unnecessary.
ForkJoinTask#peekNextLocalTask():::Returns, but does not unschedule or execute, a task queued by the current thread but not yet executed, if one is immediately available
ForkJoinWorkerThread#afterTopLevelExec():::Non-public hook method for InnocuousForkJoinWorkerThread.
Future#get():::Waits if necessary for the computation to complete, and then retrieves its result.
FutureTask#toString():::Returns a string representation of this FutureTask.
Helpers#toString(Object[], int, int):::Like Arrays.toString(), but caller guarantees that size > 0, each element with index 0 <= i < size is a non-null String, and charLength is the sum of the lengths of the input Strings.
LinkedBlockingDeque#forEachFrom(Consumer, Node):::Runs action on each element found during a traversal starting at p
LinkedBlockingQueue#clear():::Atomically removes all of the elements from this queue
LinkedTransferQueue.Node#selfLink():::Links node to itself to avoid garbage retention
LinkedTransferQueue#transfer(E):::Transfers the element to a consumer, waiting if necessary to do so
Phaser#forceTermination():::Forces this phaser to enter termination state
PriorityBlockingQueue#offer(E):::Inserts the specified element into this priority queue
RecursiveAction#compute():::The main computation performed by this task.
RecursiveTask#compute():::The main computation performed by this task.
RejectedExecutionHandler#rejectedExecution(Runnable, ThreadPoolExecutor):::Method that may be invoked by a ThreadPoolExecutor when ThreadPoolExecutor#execute execute cannot accept a task
RunnableFuture#run():::Sets this Future to the result of its computation unless it has been cancelled.
RunnableScheduledFuture#isPeriodic():::Returns true if this task is periodic
ScheduledExecutorService#schedule(Callable, long, TimeUnit):::Submits a value-returning one-shot task that becomes enabled after the given delay.
ScheduledThreadPoolExecutor#scheduleWithFixedDelay(Runnable, long, long, TimeUnit):::Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next
Semaphore#acquire():::Acquires a permit from this semaphore, blocking until one is available, or the thread is Thread#interrupt interrupted
SubmissionPublisher#isClosed():::Returns true if this publisher is not accepting submissions.
SubmissionPublisher.BufferedSubscription#estimateLag():::Returns estimated number of buffered items, or negative if closed.
SynchronousQueue.Transferer#transfer(E, boolean, long):::Performs a put or take.
SynchronousQueue.TransferStack#clean(SNode):::Unlinks s from the stack.
SynchronousQueue.TransferStack.SNode#tryMatch(SNode):::Tries to match node s to this node, if so, waking up thread
SynchronousQueue.TransferQueue.QNode#tryCancel(Object):::Tries to cancel by CAS'ing ref to this as item.
SynchronousQueue.TransferQueue#casCleanMe(QNode, QNode):::Tries to CAS cleanMe slot.
SynchronousQueue#containsAll(Collection):::Returns false unless the given collection is empty
ThreadFactory#newThread(Runnable):::Constructs a new Thread
ThreadLocalRandom#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadPoolExecutor#getThreadFactory():::Returns the thread factory used to create new threads.
ThreadPoolExecutor.CallerRunsPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded.
ThreadPoolExecutor.AbortPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Always throws RejectedExecutionException.
ThreadPoolExecutor.DiscardPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Does nothing, which has the effect of discarding task r.
ThreadPoolExecutor.DiscardOldestPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Obtains and ignores the next task that the executor would otherwise execute, if one is immediately available, and then retries execution of task r, unless the executor is shut down, in which case task r is instead discarded.
TransferQueue#getWaitingConsumerCount():::Returns an estimate of the number of consumers waiting to receive elements via #take or timed #poll(long,TimeUnit) poll
AbstractOwnableSynchronizer#getExclusiveOwnerThread():::Returns the thread last set by setExclusiveOwnerThread, or null if never set
AbstractQueuedLongSynchronizer#acquireInterruptibly(long):::Acquires in exclusive mode, aborting if interrupted
AbstractQueuedLongSynchronizer.ConditionObject#isOwnedBy(AbstractQueuedLongSynchronizer):::Returns true if this condition was created by the given synchronization object.
AbstractQueuedSynchronizer.Node#predecessor():::Returns previous node, or throws NullPointerException if null
AbstractQueuedSynchronizer#tryAcquireShared(int):::Attempts to acquire in shared mode
AbstractQueuedSynchronizer.ConditionObject#awaitUninterruptibly():::Implements uninterruptible condition wait
Condition#signalAll():::Wakes up all waiting threads
Lock#lock():::Acquires the lock
LockSupport#parkNanos(Object, long):::Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available
ReadWriteLock#readLock():::Returns the lock used for reading.
ReentrantLock.Sync#nonfairTryAcquire(int):::Performs non-fair tryLock
ReentrantLock.FairSync#tryAcquire(int):::Fair version of tryAcquire
ReentrantLock#isFair():::Returns true if this lock has fairness set true.
ReentrantReadWriteLock.Sync#tryWriteLock():::Performs tryLock for write, enabling barging in both modes
ReentrantReadWriteLock.ReadLock#tryLock():::Acquires the read lock only if the write lock is not held by another thread at the time of invocation
ReentrantReadWriteLock.WriteLock#getHoldCount():::Queries the number of holds on this write lock by the current thread
ReentrantReadWriteLock#isWriteLockedByCurrentThread():::Queries if the write lock is held by the current thread.
StampedLock#tryReadLock(long, TimeUnit):::Non-exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted
AbstractCollection#toString():::Returns a string representation of this collection
AbstractList#add(E):::Appends the specified element to the end of this list (optional operation)
AbstractMap#clone():::Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.
AbstractMap.SimpleEntry#setValue(V):::Replaces the value corresponding to this entry with the specified value.
AbstractMap.SimpleImmutableEntry#getValue():::Returns the value corresponding to this entry.
AbstractQueue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available
AbstractSequentialList#remove(int):::Removes the element at the specified position in this list (optional operation)
AbstractSet#equals(Object):::Compares the specified object with this set for equality
ArrayDeque#element():::Retrieves, but does not remove, the head of the queue represented by this deque
ArrayList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
Arrays#mismatch(short[], int, int, short[], int, int):::Finds and returns the relative index of the first mismatch between two short arrays over the specified ranges, otherwise return -1 if no mismatch is found
Base64#getMimeEncoder(int, byte[]):::Returns a Encoder that encodes using the MIME type base64 encoding scheme with specified line length and line separators.
Base64.Encoder#encodeToString(byte[]):::Encodes the specified byte array into a String using the Base64 encoding scheme
Base64.Decoder#decode(byte[]):::Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into a newly-allocated output byte array
BitSet#length():::Returns the "logical size" of this BitSet: the index of the highest set bit in the BitSet plus one
Calendar.Builder#setWeekDate(int, int, int):::Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week
Calendar#set(int, int, int):::Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH
Collection#retainAll(Collection):::Retains only the elements in this collection that are contained in the specified collection (optional operation)
Collections#emptySet():::Returns an empty set (immutable)
ComparableTimSort#sort(Object[], int, int, Object[], int, int):::Sorts the given range, using the given workspace array slice for temp storage when possible
Comparator#naturalOrder():::Returns a comparator that compares Comparable objects in natural order
Currency#getNumericCode():::Returns the ISO 4217 numeric code of this currency.
Date#getTime():::Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object.
Deque#offerFirst(E):::Inserts the specified element at the front of this deque unless it would violate capacity restrictions
Dictionary#size():::Returns the number of entries (distinct keys) in this dictionary.
DoubleSummaryStatistics#getMin():::Returns the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded
DualPivotQuicksort#sort(int[], int, int, int[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DuplicateFormatFlagsException#getFlags():::Returns the set of flags which contains a duplicate flag.
Enumeration#asIterator():::Returns an Iterator that traverses the remaining elements covered by this enumeration
EnumMap#keySet():::Returns a Set view of the keys contained in this map
EnumSet#addRange(E, E):::Adds the specified range to this enum set, which is empty prior to the call.
EventListenerProxy#getListener():::Returns the listener associated with the proxy.
EventObject#getSource():::The object on which the Event initially occurred.
FormatFlagsConversionMismatchException#getConversion():::Returns the incompatible conversion.
Formattable#formatTo(Formatter, int, int, int):::Formats the object using the provided Formatter formatter.
Formatter#flush():::Flushes this formatter
GregorianCalendar#getActualMaximum(int):::Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, #getGregorianChange() getGregorianChange and Calendar#getTimeZone() getTimeZone methods
HashMap#treeifyBin(Node[], int):::Replaces all linked nodes in bin at index for given hash unless table is too small, in which case resizes instead.
HashMap.TreeNode#treeify(Node[]):::Forms tree of the nodes linked from this node.
HashSet#isEmpty():::Returns true if this set contains no elements.
Hashtable#putAll(Map):::Copies all of the mappings from the specified map to this hashtable
IdentityHashMap#clear():::Removes all of the mappings from this map
IllegalFormatCodePointException#getCodePoint():::Returns the illegal code point as defined by Character#isValidCodePoint.
IllegalFormatConversionException#getConversion():::Returns the inapplicable conversion.
IllegalFormatFlagsException#getFlags():::Returns the set of flags which contains an illegal combination.
IllegalFormatPrecisionException#getPrecision():::Returns the precision
IllegalFormatWidthException#getWidth():::Returns the width
IllformedLocaleException#getErrorIndex():::Returns the index where the error was found
ImmutableCollections.SubList#fromSubList(SubList, int, int):::Constructs a sublist of another SubList.
IntSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded.
Iterator#forEachRemaining(Consumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
JapaneseImperialCalendar#getMaximum(int):::Returns the maximum value for the given calendar field of this GregorianCalendar instance
JumboEnumSet#contains(Object):::Returns true if this set contains the specified element.
KeyValueHolder#setValue(V):::Throws UnsupportedOperationException.
LinkedHashMap#keySet():::Returns a Set view of the keys contained in this map
LinkedHashSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set
LinkedList#contains(Object):::Returns true if this list contains the specified element
List#of(E, E, E, E, E, E, E):::Returns an unmodifiable list containing seven elements
ListIterator#previousIndex():::Returns the index of the element that would be returned by a subsequent call to #previous
ListResourceBundle#getKeys():::Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
Locale#getISOCountries():::Returns a list of all 2-letter country codes defined in ISO 3166
Locale.Builder#setLocale(Locale):::Resets the Builder to match the provided locale
Locale.LanguageRange#hashCode():::Returns a hash code value for the object.
LocaleISOData#computeISO3166_1Alpha3Countries():::This method computes a set of ISO3166-1 alpha-3 country codes from existing isoCountryTable.
LongSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging
Map#copyOf(Map):::Returns an unmodifiable Map containing the entries of the given Map
Map.Entry#comparingByValue():::Returns a comparator that compares Map.Entry in natural order on value
MissingFormatArgumentException#getFormatSpecifier():::Returns the unmatched format specifier.
MissingFormatWidthException#getFormatSpecifier():::Returns the format specifier which does not have a width.
MissingResourceException#getKey():::Gets parameter passed by constructor.
NavigableMap#ceilingKey(K):::Returns the least key greater than or equal to the given key, or null if there is no such key.
NavigableSet#descendingSet():::Returns a reverse order view of the elements contained in this set
Objects#requireNonNull(T):::Checks that the specified object reference is not null
Observable#hasChanged():::Tests if this object has changed.
Observer#update(Observable, Object):::This method is called whenever the observed object is changed
Optional#map(Function):::If a value is present, returns an Optional describing (as if by #ofNullable) the result of applying the given mapping function to the value, otherwise returns an empty Optional
OptionalDouble#isEmpty():::If a value is not present, returns true, otherwise false.
OptionalInt#isEmpty():::If a value is not present, returns true, otherwise false.
OptionalLong#ifPresent(LongConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.
PrimitiveIterator#forEachRemaining(T_CONS):::Performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception
PrimitiveIterator.OfInt#nextInt():::Returns the next int element in the iteration.
PrimitiveIterator.OfLong#forEachRemaining(LongConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
PrimitiveIterator.OfDouble#nextDouble():::Returns the next double element in the iteration.
PriorityQueue#removeEq(Object):::Identity-based version for use in Itr.remove.
Properties#store(Writer, String):::Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the #load(java.io.Reader) load(Reader) method
PropertyPermission#getActions(int):::Return the canonical string representation of the actions
PropertyPermissionCollection#add(Permission):::Adds a permission to the PropertyPermissions
PropertyResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle.
Queue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.
Random#longs(long, long):::Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive)
RegularEnumSet#clear():::Removes all of the elements from this set.
ResourceBundle#getBundle(String, Locale, ClassLoader):::Gets a resource bundle using the specified base name, locale, and class loader
ResourceBundle.Control#toResourceName(String, String):::Converts the given bundleName to the form required by the ClassLoader#getResource ClassLoader.getResource method by replacing all occurrences of '.' in bundleName with '/' and appending a '.' and the given file suffix
Scanner#skip(String):::Skips input that matches a pattern constructed from the specified string
ServiceLoader.Provider#type():::Returns the provider type
ServiceLoader#loadInstalled(Class):::Creates a new service loader for the given service type, using the ClassLoader#getPlatformClassLoader() platform class loader
Set#of(E, E, E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing ten elements
SimpleTimeZone#setStartRule(int, int, int, int, boolean):::Sets the daylight saving time start rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.
SortedMap#firstKey():::Returns the first (lowest) key currently in this map.
SortedSet#first():::Returns the first (lowest) element currently in this set.
Spliterator#forEachRemaining(Consumer):::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception
Spliterator.OfPrimitive#forEachRemaining(T_CONS):::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception
Spliterators#spliterator(Collection, int):::Creates a Spliterator using the given collection's java.util.Collection#iterator() as the source of elements, and reporting its java.util.Collection#size() as its initial size
Spliterators.AbstractSpliterator#trySplit():::  This implementation permits limited parallelism.
Spliterators.AbstractIntSpliterator#trySplit():::  This implementation permits limited parallelism.
Spliterators.AbstractLongSpliterator#trySplit():::  This implementation permits limited parallelism.
Spliterators.AbstractDoubleSpliterator#trySplit():::  This implementation permits limited parallelism.
SplittableRandom#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
Stack#search(Object):::Returns the 1-based position where an object is on this stack
StringJoiner#setEmptyValue(CharSequence):::Sets the sequence of characters to be used when determining the string representation of this StringJoiner and no elements have been added yet, that is, when it is empty
StringTokenizer#nextToken():::Returns the next token from this string tokenizer.
Timer#schedule(TimerTask, Date, long):::Schedules the specified task for repeated fixed-delay execution, beginning at the specified time
TaskQueue#get(int):::Return the ith task in the priority queue, where i ranges from 1 (the head task, which is returned by getMin) to the number of tasks on the queue, inclusive.
TimerTask#run():::The action to be performed by this timer task.
TimeZone#clone():::Creates a copy of this TimeZone.
TimSort#sort(T[], int, int, Comparator, T[], int, int):::Sorts the given range, using the given workspace array slice for temp storage when possible
TreeMap#entrySet():::Returns a Set view of the mappings contained in this map
TreeMap.NavigableSubMap#descendingKeyIterator():::Returns descending iterator from the perspective of this submap
TreeMap.Entry#getValue():::Returns the value associated with the key.
TreeSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.
Tripwire#trip(Class, String):::Produces a log warning, using PlatformLogger.getLogger(className), using the supplied message
UnknownFormatConversionException#getConversion():::Returns the unknown conversion.
UnknownFormatFlagsException#getFlags():::Returns the set of flags which contains an unknown flag.
UUID#getMostSignificantBits():::Returns the most significant 64 bits of this UUID's 128 bit value.
Vector#toArray(T[]):::Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array
WeakHashMap#remove(Object):::Removes the mapping for a key from this weak hash map if it is present
BiConsumer#accept(T, U):::Performs this operation on the given arguments.
BiFunction#andThen(Function):::Returns a composed function that first applies this function to its input, and then applies the after function to the result
BinaryOperator#minBy(Comparator):::Returns a BinaryOperator which returns the lesser of two elements according to the specified Comparator.
BiPredicate#or(BiPredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
BooleanSupplier#getAsBoolean():::Gets a result.
Consumer#andThen(Consumer):::Returns a composed Consumer that performs, in sequence, this operation followed by the after operation
DoubleBinaryOperator#applyAsDouble(double, double):::Applies this operator to the given operands.
DoubleConsumer#accept(double):::Performs this operation on the given argument.
DoubleFunction#apply(double):::Applies this function to the given argument.
DoublePredicate#negate():::Returns a predicate that represents the logical negation of this predicate.
DoubleSupplier#getAsDouble():::Gets a result.
DoubleToIntFunction#applyAsInt(double):::Applies this function to the given argument.
DoubleToLongFunction#applyAsLong(double):::Applies this function to the given argument.
DoubleUnaryOperator#andThen(DoubleUnaryOperator):::Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result
Function#andThen(Function):::Returns a composed function that first applies this function to its input, and then applies the after function to the result
IntBinaryOperator#applyAsInt(int, int):::Applies this operator to the given operands.
IntConsumer#andThen(IntConsumer):::Returns a composed IntConsumer that performs, in sequence, this operation followed by the after operation
IntFunction#apply(int):::Applies this function to the given argument.
IntPredicate#test(int):::Evaluates this predicate on the given argument.
IntSupplier#getAsInt():::Gets a result.
IntToDoubleFunction#applyAsDouble(int):::Applies this function to the given argument.
IntToLongFunction#applyAsLong(int):::Applies this function to the given argument.
IntUnaryOperator#andThen(IntUnaryOperator):::Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result
LongBinaryOperator#applyAsLong(long, long):::Applies this operator to the given operands.
LongConsumer#accept(long):::Performs this operation on the given argument.
LongFunction#apply(long):::Applies this function to the given argument.
LongPredicate#and(LongPredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
LongSupplier#getAsLong():::Gets a result.
LongToDoubleFunction#applyAsDouble(long):::Applies this function to the given argument.
LongToIntFunction#applyAsInt(long):::Applies this function to the given argument.
LongUnaryOperator#identity():::Returns a unary operator that always returns its input argument.
ObjDoubleConsumer#accept(T, double):::Performs this operation on the given arguments.
ObjIntConsumer#accept(T, int):::Performs this operation on the given arguments.
ObjLongConsumer#accept(T, long):::Performs this operation on the given arguments.
Predicate#test(T):::Evaluates this predicate on the given argument.
Supplier#get():::Gets a result.
ToDoubleBiFunction#applyAsDouble(T, U):::Applies this function to the given arguments.
ToDoubleFunction#applyAsDouble(T):::Applies this function to the given argument.
ToIntBiFunction#applyAsInt(T, U):::Applies this function to the given arguments.
ToIntFunction#applyAsInt(T):::Applies this function to the given argument.
ToLongBiFunction#applyAsLong(T, U):::Applies this function to the given arguments.
ToLongFunction#applyAsLong(T):::Applies this function to the given argument.
UnaryOperator#identity():::Returns a unary operator that always returns its input argument.
Attributes#getValue(Name):::Returns the value of the specified Attributes.Name, or null if the attribute was not found
Attributes.Name#hashCode():::Computes the hash value for this attribute name.
JarEntry#getAttributes():::Returns the Manifest Attributes for this entry, or null if none.
JarFile#entries2():::Returns an enumeration of the zip file entries excluding internal JAR mechanism entries and including signed entries missing from the ZIP directory.
JarInputStream#getManifest():::Returns the Manifest for this JAR file, or null if none.
JarOutputStream#putNextEntry(ZipEntry):::Begins writing a new JAR file entry and positions the stream to the start of the entry data
JarVerifier#isTrustedManifestEntry(String):::Returns whether the name is trusted
Manifest#read(InputStream):::Reads the Manifest from the specified InputStream
Pack200#newPacker():::Obtain new instance of a class that implements Packer
Pack200.Packer#pack(JarInputStream, OutputStream):::Takes a JarInputStream and converts it into a Pack200 archive
Pack200.Unpacker#properties():::Get the set of this engine's properties
CharPredicates#forUnicodeBlock(String):::Returns a predicate matching all characters in a UnicodeBlock.
Grapheme#isBoundary(int, int):::Determines if there is an extended  grapheme cluster boundary between two continuing characters cp1 and cp2
Matcher#matches():::Attempts to match the entire region against the pattern
MatchResult#start(int):::Returns the start index of the subsequence captured by the given group during this match
Pattern#split(CharSequence, int):::Splits the given input sequence around matches of this pattern
Pattern.Node#study(TreeInfo):::This method is good for all zero length assertions.
Pattern.LastNode#match(Matcher, int, CharSequence):::This method implements the classic accept node with the addition of a check to see if the match occurred using all of the input.
Pattern.BnM#optimize(Node):::Pre calculates arrays needed to generate the bad character shift and the good suffix shift
PatternSyntaxException#getMessage():::Returns a multi-line string containing the description of the syntax error and its index, the erroneous regular-expression pattern, and a visual indication of the error index within the pattern.
AbstractResourceBundleProvider#getBundle(String, Locale):::Returns a ResourceBundle for the given baseName and locale.
CalendarDataProvider#getFirstDayOfWeek(Locale):::Returns the first day of a week in the given locale
CalendarNameProvider#getDisplayNames(String, int, int, Locale):::Returns a Map containing all string representations (display names) of the Calendar field in the given style and locale and their corresponding field values
CurrencyNameProvider#getDisplayName(String, Locale):::Returns a name for the currency that is appropriate for display to the user
LocaleNameProvider#getDisplayUnicodeExtensionType(String, String, Locale):::Returns a localized name for the given Unicode extension type, and the given locale that is appropriate for display to the user
LocaleServiceProvider#isSupportedLocale(Locale):::Returns true if the given locale is supported by this locale service provider
ResourceBundleControlProvider#getControl(String):::Returns a ResourceBundle.Control instance that is used to handle resource bundle loading for the given baseName
ResourceBundleProvider#getBundle(String, Locale):::Returns a ResourceBundle for the given bundle name and locale
TimeZoneNameProvider#getDisplayName(String, boolean, int, Locale):::Returns a name for the given time zone ID that's suitable for presentation to the user in the specified locale
ToolProvider#run(PrintWriter, PrintWriter, String...):::Runs an instance of the tool, returning zero for a successful run
AbstractPipeline#evaluateToNode(PipelineHelper, Spliterator, boolean, IntFunction):::Collect elements output from a pipeline into a Node that holds elements of this shape.
AbstractShortCircuitTask#getRawResult():::Retrieves the local result for this task
AbstractSpinedBuffer#clear():::Remove all data from the buffer
AbstractTask#makeChild(Spliterator):::Constructs a new node of type T whose parent is the receiver; must call the AbstractTask(T, Spliterator) constructor with the receiver and the provided Spliterator.
BaseStream#close():::Closes this stream, causing all close handlers for this stream pipeline to be called.
Collector#finisher():::Perform the final transformation from the intermediate accumulation type A to the final result type R
Collectors#counting():::Returns a Collector accepting elements of type T that counts the number of input elements
DistinctOps#makeRef(AbstractPipeline):::Appends a "distinct" operation to the provided stream, and returns the new stream.
DoubleStream#mapToObj(DoubleFunction):::Returns an object-valued Stream consisting of the results of applying the given function to the elements of this stream
DoubleStream.Builder#add(double):::Adds an element to the stream being built.
FindOps#makeRef(boolean):::Constructs a TerminalOp for streams of objects.
ForEachOps#makeLong(LongConsumer, boolean):::Constructs a TerminalOp that perform an action for every element of a LongStream.
IntStream#reduce(IntBinaryOperator):::Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an OptionalInt describing the reduced value, if any
IntStream.Builder#build():::Builds the stream, transitioning this builder to the built state
LongStream#mapToInt(LongToIntFunction):::Returns an IntStream consisting of the results of applying the given function to the elements of this stream
LongStream.Builder#build():::Builds the stream, transitioning this builder to the built state
MatchOps#makeInt(IntPredicate, MatchKind):::Constructs a quantified predicate matcher for an IntStream.
Node#copyInto(T[], int):::Copies the content of this Node into an array, starting at a given offset into the array
Node.Builder#build():::Builds the node
Node.OfPrimitive#forEach(T_CONS):::Traverses the elements of this node, and invoke the provided action with each element.
Nodes#flattenDouble(Node.OfDouble):::Flatten, in parallel, a Node.OfDouble
PipelineHelper#wrapSink(Sink):::Takes a Sink that accepts elements of the output type of the PipelineHelper, and wrap it with a Sink that accepts elements of the input type and implements all the intermediate operations described by this PipelineHelper, delivering the result into the provided Sink.
ReduceOps#makeLong(Supplier, ObjLongConsumer, BinaryOperator):::Constructs a TerminalOp that implements a mutable reduce on long values.
Sink#cancellationRequested():::Indicates that this Sink does not wish to receive any more data.
SliceOps#makeInt(AbstractPipeline, long, long):::Appends a "slice" operation to the provided IntStream
SortedOps#makeRef(AbstractPipeline, Comparator):::Appends a "sorted" operation to the provided stream.
SpinedBuffer#capacity():::Returns the current capacity of the buffer
SpinedBuffer.OfPrimitive#newArrayArray(int):::Create a new array-of-array of the proper type and size
Stream#min(Comparator):::Returns the minimum element of this stream according to the provided Comparator
Stream.Builder#add(T):::Adds an element to the stream being built.
Streams#composedClose(BaseStream, BaseStream):::Given two streams, return a Runnable that executes both of their BaseStream#close methods in sequence, even if the first throws an exception, and if both throw exceptions, add any exceptions thrown by the second as suppressed exceptions of the first.
StreamSpliterators.UnorderedSliceSpliterator#acquirePermits(long):::Acquire permission to skip or process elements
StreamSupport#stream(Supplier>, int, boolean):::Creates a new sequential or parallel Stream from a Supplier of Spliterator